<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Developer on 贾德尔的笔记本</title><link>/tags/developer/</link><description>Recent content in Developer on 贾德尔的笔记本</description><generator>Hugo 0.125.0</generator><language>zh-CN</language><lastBuildDate>Sun, 29 Jun 2025 03:30:02 +0800</lastBuildDate><atom:link href="/tags/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Nginx常用设置</title><link>/posts/devops/nginx/proxy/</link><pubDate>Thu, 29 Sep 2022 14:55:03 +0800</pubDate><guid>/posts/devops/nginx/proxy/</guid><description>反向代理 http://localhost =&amp;gt; http://api-service
location ~ ^/api { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://&amp;lt;API-service&amp;gt;:&amp;lt;port&amp;gt;; } 添加后缀 http://ipfs-service/&amp;lt;hash&amp;gt;.&amp;lt;ext&amp;gt; =&amp;gt; http://ipfs-service/&amp;lt;hash&amp;gt;
location ~ ^/prefix { rewrite ^/prefix/(.*).(&amp;lt;ext&amp;gt;)$ /$1 break; proxy_pass http://&amp;lt;API-service&amp;gt;:&amp;lt;port&amp;gt;$1; } 局部代理 http://domian/AAA/static/dir/a.js =&amp;gt; http:///static/dir/a.js
location ~ (.*)/static/(.*)$ { proxy_ignore_client_abort on; proxy_http_version 1.1; proxy_pass https://&amp;lt;static-service&amp;gt;/static/$2; } 重定向 http://localhost/dirname (301)=&amp;gt; http://localhost/dirname/
location ~ ^/dirname { return 301 &amp;#34; /dirname/&amp;#34;; }</description></item><item><title>汇编特征码</title><link>/posts/develop/assembly/assembly/</link><pubDate>Sun, 03 Apr 2022 02:33:36 +0000</pubDate><guid>/posts/develop/assembly/assembly/</guid><description>什么是特征码 特征码用于辨识程序执行的代码段，用于反作弊和逆向 什么情况使用特征码 在逆向工程中，如果程序重新打包或者做加密处理后原有的函数指针发生了偏移，之前的的地址无效。此时使用特征码，可以减少或避免出现类似情况 如何定位特征码 在目标地址上取一定范围的汇编代码记录，其中带有函数调用类似行为代码通畅不会做大的变动除非修改猿程序的函数会需要重新定位。 案例分析 1）如果特征码的代码带有特殊的常量，并且这个常量不是目标程序的内存地址时，优先选取其为特征码。一般常量在程序中很少会改变。
例如如下为某函数的反汇编代码，获取这个函数的地址，选取&amp;quot;83 FE 2E 74 38&amp;quot;为特征码是比较合适的。-5地址处就为函数起始地址。
$-5 &amp;gt; . 56 PUSH ESI ;函数地址 $-4 &amp;gt; . 8B7424 08 MOV ESI,DWORD PTR SS:[ESP+8]
$ ==&amp;gt; &amp;gt; . 83FE 2E CMP ESI,2E ;2e 为特殊常量
$+3 &amp;gt; . 74 38 JE 0BCCCCA2 ;短跳转
$+5 &amp;gt; . 83FE 2D CMP ESI,2D $+8 &amp;gt; . 74 33 JE 0BCCCCA2
$+A &amp;gt; . 83FE 33 CMP ESI,33
2）如果特征码带有短跳转的代码，优先选取。因为只要你选取的特战码以及从选取的特征码地址到跳转的地址之间随目标程序更新变化的概率较少。如上面的短跳转指令
3）如果特征码带有结构体或者类变量的对应偏移的代码，可以选取。一般只要结构体或者类变量不增加成员，就不会改变。</description></item><item><title>RESTful API 文章解读</title><link>/posts/develop/rules/restful-api/</link><pubDate>Sat, 03 Jul 2021 01:35:35 +0000</pubDate><guid>/posts/develop/rules/restful-api/</guid><description>RESTful API 设计指南 出处 作者： 阮一峰 日期： 2014年5月22日 网络应用程序，分为前端和后端两个部分。当前的发展趋势，就是前端设备层出不穷（手机、平板、桌面电脑、其他专用设备&amp;hellip;&amp;hellip;）。
因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现&amp;quot;API First&amp;quot;的设计思想。RESTful API是目前比较成熟的一套互联网应用程序的API设计理论。我以前写过一篇《理解RESTful架构》，探讨如何理解这个概念。
今天，我将介绍RESTful API的设计细节，探讨如何设计一套合理、好用的API。我的主要参考了两篇文章（1，2）。
RESTful API 一、协议 API与用户的通信协议，总是使用HTTPs协议。 二、域名 应该尽量将API部署在专用域名之下。 https://api.example.com 如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。
https://example.org/api/
三、版本（Versioning） 应该将API的版本号放入URL。 https://api.example.com/v1/ 另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。Github采用这种做法。
四、路径（Endpoint） 路径又称&amp;quot;终点&amp;quot;（endpoint），表示API的具体网址。 在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的&amp;quot;集合&amp;quot; （collection），所以API中的名词也应该使用复数。
举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。
https://api.example.com/v1/zoos https://api.example.com/v1/animals https://api.example.com/v1/employees
五、HTTP动词 对于资源的具体操作类型，由HTTP词表示。 常用的HTTP动词有下面五个（括号里是对应的SQL命令）。
GET（SELECT）：从服务器取出资源（一项或多项）。
POST（CREATE）：在服务器新建一个资源。
PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。
PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。
DELETE（DELETE）：从服务器删除资源。 还有两个不常用的HTTP动词。
HEAD：获取资源的元数据。
OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。 下面是一些例子。
GET /zoos：列出所有动物园
POST /zoos：新建一个动物园
GET /zoos/ID：获取某个指定动物园的信息
PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）
PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）
DELETE /zoos/ID：删除某个动物园
GET /zoos/ID/animals：列出某个指定动物园的所有动物
DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物
六、过滤信息（Filtering） 如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。 下面是一些常见的参数。
?limit=10：指定返回记录的数量
?offset=10：指定返回记录的开始位置。
?page=2&amp;amp;per_page=100：指定第几页，以及每页的记录数。
?sortby=name&amp;amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</description></item><item><title>驱动模式</title><link>/posts/develop/rules/driven-patterns/</link><pubDate>Sun, 06 Jun 2021 12:12:14 +0000</pubDate><guid>/posts/develop/rules/driven-patterns/</guid><description>TDD：测试驱动开发(Test-Driven Development) 测试驱动开发是敏捷开发中的一项核心实践和技术，也是一种设计方法论，TDD首先考虑使用需求（对象、功能、过程、接口等）
主要是编写测试用例框架对功能的过程和接口进行设计，而测试框架可以持续进行验证。大行其道的一些模式对TDD的支持都非常不错，比如MVC和MVP等
BDD：行为驱动开发(Behavior Driven Development) 也就是行为驱动开发。这里的B并非指的是Business，实际上BDD可以看作是对TDD的一种补充，让开发、测试、BA以及客户都能在这个基础上达成一致，JBehave之类的BDD框架
ATDD：验收测试驱动开发（Acceptance Test Driven Development） 通过单元测试用例来驱动功能代码的实现，团队需要定义出期望的质量标准和验收细则，以明确而且达成共识的验收测试计划（包含一系列测试场景）来驱动开发人员的TDD实践和测试人员的测试脚本开发。面向开发人员，强调如何实现系统以及如何检验
DDD：领域驱动开发（Domain Drive Design） DDD指的是Domain Drive Design，也就是领域驱动开发,DDD实际上也是建立在这个基础之上，因为它关注的是Service层的设计，着重于业务的实现,将分析和设计结合起来，不再使他们处于分裂的状态，这对于我们正确完整的实现客户的需求，以及建立一个具有业务伸缩性的模型</description></item></channel></rss>