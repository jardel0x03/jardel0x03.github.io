<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devops on 贾德尔的笔记本</title><link>/tags/devops/</link><description>Recent content in Devops on 贾德尔的笔记本</description><generator>Hugo 0.125.0</generator><language>zh-CN</language><lastBuildDate>Sun, 29 Jun 2025 03:34:57 +0800</lastBuildDate><atom:link href="/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>搭建你的家庭实验室（HomeLab）指南</title><link>/posts/homelab/homelab/</link><pubDate>Sat, 28 Jun 2025 22:00:00 +0800</pubDate><guid>/posts/homelab/homelab/</guid><description>TODO</description></item><item><title>多个 SSH Keys 用于多个git账号</title><link>/posts/devops/linux/ssh-multiple-accounts/</link><pubDate>Thu, 29 Sep 2022 15:33:30 +0800</pubDate><guid>/posts/devops/linux/ssh-multiple-accounts/</guid><description>account Refer To Link
Change SHH config vim $HOME/.ssh/config Host github.com-work HostName github.com User git IdentityFile ~/.ssh/id_rsa_activehacker Host github.com-personal HostName github.com User git IdentityFile ~/.ssh/id_rsa_jexchan Change project git config vim .git/config Modify config [core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote &amp;#34;origin&amp;#34;] - url = git@github.com:&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git + url = git@github.com-personal:&amp;lt;username&amp;gt;/&amp;lt;project&amp;gt;.git fetch = +refs/heads/*:refs/remotes/origin/* [branch &amp;#34;master&amp;#34;] remote = origin merge = refs/heads/master [user] name = &amp;lt;username&amp;gt; email = &amp;lt;email&amp;gt;</description></item><item><title>Nginx常用设置</title><link>/posts/devops/nginx/proxy/</link><pubDate>Thu, 29 Sep 2022 14:55:03 +0800</pubDate><guid>/posts/devops/nginx/proxy/</guid><description>反向代理 http://localhost =&amp;gt; http://api-service
location ~ ^/api { proxy_set_header Host $http_host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_pass http://&amp;lt;API-service&amp;gt;:&amp;lt;port&amp;gt;; } 添加后缀 http://ipfs-service/&amp;lt;hash&amp;gt;.&amp;lt;ext&amp;gt; =&amp;gt; http://ipfs-service/&amp;lt;hash&amp;gt;
location ~ ^/prefix { rewrite ^/prefix/(.*).(&amp;lt;ext&amp;gt;)$ /$1 break; proxy_pass http://&amp;lt;API-service&amp;gt;:&amp;lt;port&amp;gt;$1; } 局部代理 http://domian/AAA/static/dir/a.js =&amp;gt; http:///static/dir/a.js
location ~ (.*)/static/(.*)$ { proxy_ignore_client_abort on; proxy_http_version 1.1; proxy_pass https://&amp;lt;static-service&amp;gt;/static/$2; } 重定向 http://localhost/dirname (301)=&amp;gt; http://localhost/dirname/
location ~ ^/dirname { return 301 &amp;#34; /dirname/&amp;#34;; }</description></item><item><title>docker mysql 数据备份脚本shell（基于crontab）</title><link>/posts/devops/linux/docker-mysql-backup/</link><pubDate>Sat, 03 Jul 2021 09:32:00 +0000</pubDate><guid>/posts/devops/linux/docker-mysql-backup/</guid><description>定时备份数据库 新建一个backup.sh用于备份成sql文件
#! /bin/bash BACKUP_DIR=&amp;#34;&amp;lt;备份sql保存位置&amp;gt;&amp;#34; LOG_FILE=&amp;#34;&amp;lt;LOG文件位置&amp;gt;&amp;#34; DATE=`date +%Y-%m-%d_%H-%M` USER=&amp;#34;数据库用户名&amp;#34; PASSWORD=&amp;#34;数据库密码&amp;#34; DATABASE=&amp;#34;数据库名&amp;#34; SQL_FILE=&amp;#34;mysql_$DATE.sql&amp;#34; DOCKER_TAG=&amp;#34;数据库docker name&amp;#34; if [! -d $BACKUP_DIR]; then mkdir -p &amp;#34;$BACKUP_DIR&amp;#34; fi echo -e &amp;#34;\n&amp;#34; &amp;gt;&amp;gt; $LOG_FILE cd $BACKUP_DIR docker exec -i $DOCKER_TAG mysqldump -u$USER -p$PASSWORD $DATABASE &amp;gt; $SQL_FILE if [[ $? == 0 ]]; then tar czvf $SQL_FILE.gz $SQL_FILE &amp;gt;&amp;gt; $LOG_FILE 2&amp;gt;&amp;amp;1 echo &amp;#34;$DATE----- $SQL_FILE.gz backup success!&amp;#34; &amp;gt;&amp;gt; $LOG_FILE rm -f $SQL_FILE else echo &amp;#34;$DATE----- $SQL_FILE.gz backup fail!&amp;#34; &amp;gt;&amp;gt; $LOG_FILE fi 定时删除超过规定时间的备份文件 新建一个clear_backup.</description></item><item><title>基于adb命令获取app 内存 FPS CPU 占用信息</title><link>/posts/devops/linux/adb-shell/</link><pubDate>Fri, 04 Jun 2021 17:48:56 +0000</pubDate><guid>/posts/devops/linux/adb-shell/</guid><description>adb shell am [command] am =&amp;gt;是activity manager的缩写,它可以启动activity,启动service,发送广播等 pm =&amp;gt;就是package manager的缩写.
发送一条广播
adb -s BH909NJ676 shell am broadcast adb 获取内存占用 adb shell dumpsys meminfo -h meminfo dump options: [-a] [-d] [-c] [-s] [--oom] [process] -a: include all available information for each process. -d: include dalvik details. -c: dump in a compact machine-parseable representation. -s: dump only summary of application memory usage. -S: dump also SwapPss. --oom: only show processes organized by oom adj.</description></item><item><title>Ubuntu UFW 防火墙常用使用操作</title><link>/posts/devops/linux/ubuntu-ufw/</link><pubDate>Fri, 04 Jun 2021 09:48:55 +0000</pubDate><guid>/posts/devops/linux/ubuntu-ufw/</guid><description>安装 Ubuntu20.04一般都默认安装了UFW（Uncomplicated Firewall），它是一款轻量化的工具，主要用于对输入输出的流量进行监控。如果没有安装，请用下面的命令安装：
apt install ufw 安装成功后查看状态
ufw status verbose 启用UFW
ufw enable ufw default deny 允许外部访问指定端口
ufw allow 53 允许指定IP访问全部端口
ufw allow from &amp;lt;IP&amp;gt; 允许指定的IP访问指定的端口
ufw allow proto tcp from 192.168.0.0/24 to any port 22 删除某一条端口规则配置
ufw delete allow &amp;lt;PORT&amp;gt;</description></item></channel></rss>